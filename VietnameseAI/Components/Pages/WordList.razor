@inject UserLearningDatabase userLearningDatabase
@page "/wordList"
@using Microsoft.AspNetCore.Components.QuickGrid
@using VietnameseAI.Shared.Utilities

<h1>Word List</h1>

<p>Words you've discovered</p>

@if (discoveredWords == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="search-box">
		<input type="search" autofocus @bind="wordFilter" @bind:event="oninput" placeholder="Search..." />
	</div>
	<div class="grid">
		<QuickGrid Items="@filteredDiscoveredWords" Pagination="@pagination">
			<PropertyColumn Property="@(c => c.Word)" Title="Vietnamese" Sortable="true" />
			<PropertyColumn Property="@(c => c.Definition)" Title="English" Sortable="true" />
			<PropertyColumn Property="@(c => c.TimesDiscovered)" Title="Times Seen" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" Sortable="true" />
			<PropertyColumn Property="@(c => c.DiscoveredDate)" Title="First Seen" Format="yyyy-MM-dd" Sortable="true" />
			<PropertyColumn Property="@(c => c.LastSeenDate)" Title="Last Seen" Format="yyyy-MM-dd" Sortable="true" />
			<TemplateColumn Title="Actions">
				<button class="btn btn-sm btn-danger" @onclick="@(e => HandleDelete(context))">Delete</button>
			</TemplateColumn>
		</QuickGrid>
	</div>

	<Paginator State="@pagination" />
}
@code {
	IQueryable<DiscoveredWord>? discoveredWords;
	IQueryable<DiscoveredWord>? filteredDiscoveredWords => discoveredWords?.Where(x => x.Word.ContainsIgnoringAccentsAndCase(wordFilter) || x.Definition.ContainsIgnoringAccentsAndCase(wordFilter));
	PaginationState pagination = new PaginationState { ItemsPerPage = 25 };
	string wordFilter = string.Empty;


	protected override async Task OnInitializedAsync()
	{
		await ReloadList();
	}

	private async Task HandleDelete(DiscoveredWord word)
	{
		await userLearningDatabase.DeleteItemAsync(word);
		await ReloadList();
	}

	private async Task ReloadList()
	{
		discoveredWords = (await userLearningDatabase.GetDiscoveredWordsAsync()).AsQueryable();
	}
}
