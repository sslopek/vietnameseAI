@page "/chat"
@inject LanguageChatService languageChatService

<h1>Chat</h1>

<p>Practice conversations with AI. Type in English or Vietnamese.</p>

<div class="chat-container">
	<div class="message-list">
		@foreach (var message in messages)
		{
			<div class="message">
				<div class="@(message.IsUser ? "user-message" : "assistant-message")">
					<p class="message-body">
						@message.Text
						@if (@message.Translation != null)
						{
							<div class="translated-spoiler">@message.Translation</div>
						}
						@if (@message.NewWordCount > 0)
						{
							<div class="new-words"><i class="bi bi-stars"></i> Discovered @message.NewWordCount new words!</div>
						}
					</p>

				</div>
			</div>
		}
	</div>
	<form @onsubmit="HandleSubmit" class="input-container">
		<input @bind="userInput" placeholder="Type your message..." disabled="@isProcessing" />
		<button type="submit" class="btn btn-primary">
			@if (!isProcessing)
			{
				@("Send")
			}
			else
			{
				<span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
				<span class="visually-hidden" role="status">Loading...</span>
			}
		</button>
	</form>
</div>

@code {
	private string userInput = string.Empty;
	private bool isProcessing;
	private List<ChatMessageViewModel> messages = new List<ChatMessageViewModel>();

	private async Task HandleSubmit()
	{
		if (!string.IsNullOrWhiteSpace(userInput))
		{
			isProcessing = true;

			// Add placeholder user message to the chat
			messages.Add(new ChatMessageViewModel { Text = userInput, IsUser = true });
			var lastMessage = userInput;
			userInput = string.Empty;

			// Get results from service
			try
			{
				var chatResult = await languageChatService.SendMessage(lastMessage);

				// Replace user message placeholder with more details
				messages.RemoveAt(messages.Count - 1);
				messages.Add(new ChatMessageViewModel
					{
						Text = lastMessage,
						Translation = chatResult.RequestVietnamese,
						IsUser = true,
						NewWordCount = chatResult.NewRequestWordCount
					});

				// Add reply
				messages.Add(new ChatMessageViewModel
					{
						Text = chatResult.ResponseVietnamese,
						Translation = chatResult.ResponseEnglish,
						IsUser = false,
						NewWordCount = chatResult.NewResponseWordCount
					});
			}
			catch
			{
				messages.Add(new ChatMessageViewModel
					{
						Text = "Error - check your API key.",
						IsUser = false
					});
			}

			isProcessing = false;
		}
	}

	public class ChatMessageViewModel
	{
		public string Text { get; set; } = string.Empty;
		public string? Translation { get; set; }
		public bool IsUser { get; set; }
		public int NewWordCount { get; set; }
	}
}